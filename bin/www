#!/usr/bin/env node
// WWW文件控制配置服务器，如 服务器错误/监听
/**
 * Module dependencies.
 */

var app = require('../app');//项目入口文件
var debug = require('debug')('fovserver:server');
var http = require('http');

// var http = require('http').Server(app);
//socket.io通过传递http（HTTP服务器）对象来初始化一个新的实例。然后，我收听connection传入套接字的事件，并将其记录到控制台
var io = require('socket.io')(http);

io.on('connection', function(socket){
  console.log('connection');
  
    socket.on('chat message', function(msg){
      console.log('message: ' + msg);
      io.emit('chat message',msg);
    });
  });
//#region  HTTP Server
/**
 * Get port from environment and store in Express.
 */

var port_app = normalizePort(process.env.PORT || '3000');//默认端口设置
// var port_log = normalizePort(process.env.PORT || '4000');//log端口设置

app.set('port', port_app);
// app.set('port', port_log);

/**
 * Create HTTP server.
 */

var server_app = http.createServer(app);//创建一个express服务实例
// var server_log = http.createServer(logServer);//创建一个log服务实例

/**
 * Listen on provided port, on all network interfaces.
 */

server_app.listen(port_app);              //在port端口监听该实例
server_app.on('error', onError);          //监听错误事件
server_app.on('listening', onListening.bind(null,server_app));

// server_log.listen(port_log);              //在port端口监听该实例
// server_log.on('error', onError);          //监听错误事件
// server_log.on('listening', onListening.bind(null,server_log));


/**
 * 端口标准化函数  port==>int
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * HTTP异常事件处理函数Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    log.Error(error); 
    throw error;
  }

  var bind = typeof port_app === 'string'
    ? 'Pipe ' + port_app
    : 'Port ' + port_app;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      log.Error(bind + ' requires elevated privileges'); 
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      log.Error(bind + ' is already in use'); 
      process.exit(1);
      break;
    default:
      log.Error(error); 
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server_app.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  log.Trace('Listening on ' + bind); 
}
//#endregion


//log
const log4js = require('log4js');
var log = require("../logHelper").helper; 
log.Info("Start Server...");  
console.log('http Server listening on *:3000');